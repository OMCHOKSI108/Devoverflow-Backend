
## AI Flowchart Endpoints

Base path: `/api/ai/flowchart`

1) Create Flowchart
- Method: POST `/api/ai/flowchart` (Protected)
- Description: Generate a Mermaid flowchart from a natural-language prompt. Optionally render to PNG or SVG.
- Headers: `Authorization: Bearer <token>`
- Request body:

```json
{
	"prompt": "Explain a login flow with error handling",
	"render": true,
	"output": "png"
}
```
- Success response (201):

```json
{
	"success": true,
	"data": {
		"id": "flow_12345",
		"mermaid": "graph LR\nA[Start] --> B{Auth?}\n...",
		"markdown": "```mermaid\n...code...\n```",
		"render": {
			"status": "done",
			"pngUrl": "https://cdn.devoverflow.com/flows/flow_12345.png",
			"svgUrl": "https://cdn.devoverflow.com/flows/flow_12345.svg"
		}
	}
}
```

- Notes:
	- The LLM is forced to return only valid Mermaid code (must start with `graph LR` or `graph TB`).
	- If rendering fails, `render.status` will be `pending` and the client can poll the render endpoint.

2) Get Flow Metadata
- Method: GET `/api/ai/flowchart/:id` (Protected)
- Description: Retrieve saved mermaid text and stored metadata for a generated flowchart.
- Headers: `Authorization: Bearer <token>`
- Success response (200):

```json
{
	"success": true,
	"data": {
		"id": "flow_12345",
		"userId": "...",
		"prompt": "Explain a login flow...",
		"mermaid": "graph LR\n...",
		"pngUrl": "https://.../flow_12345.png",
		"svgUrl": "https://.../flow_12345.svg",
		"status": "done",
		"createdAt": "2025-09-17T12:34:56.789Z"
	}
}
```

3) Get Render Status / URLs
- Method: GET `/api/ai/flowchart/:id/render` (Protected)
- Description: Retrieve rendering status and URLs for a flowchart (useful when rendering is async).
- Headers: `Authorization: Bearer <token>`
- Success response (200):

```json
{
	"success": true,
	"data": {
		"status": "pending|done|failed",
		"pngUrl": null,
		"svgUrl": "https://.../flow_12345.svg"
	}
}
```

Implementation notes:
- LLM call uses Gemini (or GROQ if configured). Use a strict system prompt to ensure only Mermaid code is returned.
- Rendering uses Kroki (`https://kroki.io/mermaid/<png|svg>`) and saves files to `/uploads/flows/` by default. You can switch to S3 or Mermaid CLI as needed.
- DB collection: `flows` with schema `{ id, userId, prompt, mermaid, pngUrl, svgUrl, status, createdAt }`.
- Errors:
	- If LLM generation fails: return 500 `{ success:false, message:"AI generation failed" }`.
	- If rendering fails: return `render.status = "pending"` and allow polling.

